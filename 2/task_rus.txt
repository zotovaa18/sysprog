------------------------------------------------------------------
Shell.
Язык: С.
Время: 2 недели.
------------------------------------------------------------------

Нужно написать упрощенную версию командной строки. Она должна
принимать на вход строки вида:

    > command_name param1 param2 ...

и выполнять их при помощи вызова команды command_name с
параметрами. То есть работать как терминал.


Правила:

- Нужно, чтобы программа правильно обрабатывала строки,
  заключенные в кавычки, как одну большую строку, даже если там
  есть пробелы.

- Комментарии тоже должны обрабатываться верно, то есть
  обрезаться.

- Кроме того, должен поддерживаться конвейер, или иначе говоря
  pipe, который делается символом |, а так же перенаправление
  вывода в файл (>, >>).

- На выход программа должна печатать все то же, что и обычный
  терминал. Как /bin/bash.

- Необходимо использовать функции pipe(), dup/dup2(), fork(),
  wait(), open(), close(), как минимум одну из функций семейства exec:
  execl, execle, execlp, execv, execvp, execvP().

- Команду 'cd' нужно реализовать самому, а не просто вызвать ее
  через exec. Потому что она меняет текущую директорию самого
  терминала. К счастью, это легко делается C функцией chdir().

- Команда 'exit' тоже специальная как 'cd'. Потому что влияет на
  сам терминал. Ее нужно реализовать вручную. Но учтите, что она
  затрагивает терминал только если exit - единственная команда в
  строке. 'exit' - завершить терминал. 'exit | echo 100' - не
  завершать терминал, выполнить этот exit как любую другую команду
  через exec-функции.

- Терминал должен поддерживать токены написаные без пробелов
  (если /bin/bash тоже может). Например:
  'echo "4">file' (работает как 'echo "4" > file'), или
  'echo 100|grep 100' (работает как 'echo 100 | grep 100').

- Когда неясно, как что-то должно работать, стоит проверить это в
  настоящем терминале типа /bin/bash. И затем повторить это
  поведение.

- Код должен собираться успешно с данными флагами компилятора:
  `-Wextra -Werror -Wall -Wno-gnu-folding-constant`.


Ограничения:

- Глобальные переменные запрещены (кроме уже существующих).

- Утечки памяти запрещены. Для их поиска можно использовать
  модуль utils/heap_help. Показать репорты с нулем утечек от
  Valgrind или ASAN не достаточно - они часто пропускают утечки.

- Длина входной строки не ограничена, сохранять ее в буфер заранее
  предаллоцированного размера нельзя. Но в оперативную память
  каждая строка очевидно помещается.

- Запрещается использовать функции вроде system(), popen(), или
  еще каким-то образом пытаться обращаться к терминалу или
  автоматическому созданию конвейеров.


Послабления:

- Не нужно поддерживать перенаправление потоков по номерам/именам,
  типа stderr. Эти команды - 1>, 2>, $>, 1>> - и подобные
  поддерживать не обязательно. (Обычные > и >> все еще надо.)

- Не нужна поддержка множественного перенаправление типа
  'cmd > file1 > file2' или 'cmd > file1 file2'.

- Не нужно поддерживать '~' и '-' в реализации команды 'cd'.

- Можно использовать уже написанный парсер из parser.h и .c, с примером
  использования в solution.c.


Примеры ввода:

* Распечатать список процессов и найти среди них строку init.

    > ps aux | grep init

* Выполнить код в python и выполнить поиск по его результату:

    > echo "print('result is ', 123 + 456)" | python -i | grep result

* Печать экранированной кавычки в файл и его вывод:

    > echo "some text\" with quote" > test.txt
    > cat test.txt

* Дописывание в файл:

    > echo "first data" > test.txt
    > echo "second" >> test.txt
    > cat test.txt

* Запустить интерактивную консоль python и что-то в ней сделать:

    > python
    >>> print(1 + 2)
    >>> 3

Варианты решения:

  - 15 баллов: все описанное выше.

  - +5 баллов: поддержка операторов && и ||.

  - +5 баллов: поддержка &.

  - -5 баллов: (да, минус, не плюс) - можно использовать C++ и STL
    контейнеры.

Добавочные пункты на +5 баллов друг друга не включают. То есть
можно не делать ни одного, можно сделать первый, или второй, или
оба для +10. Или использовать C++ и получать -5 к сумме.

Вход: команды и их аргументы, операторы перенаправления
выводов/вводов.

Выход: то же, что выводит терминал.

С чего начать? Рекомендуемый план выполнения задания такой:

- Ознакомиться с парсером.

- реализовать выполнение команд без |, >, >>. Просто чтобы выполнялась одна
  команда;

- добавить |, >, >>. Для начала работы с пайпами можеть иметь смысл сначала
  завести один единственный пайп. Даже можно в отдельном .c файле с
  двумя захардкоженными командами. Например, 'echo 100' и 'grep 100'. Это нужно
  заставить работать через пайп в отрыве от основного решения. Когда заработает,
  то делаем 3 команды и два пайпа. Когда и это заработает, то уже будет заметен
  шаблон, как это обобщить до N команд.

Архитектура решения может быть следующей: есть процесс-терминал, который
читает команды пользователя. На каждую команду он делает fork(). Появившийся
потомок запускает команду используя exec* функции. Родительский процесс ждет
завершения ребенка. Для | терминал создает pipe, которым связывает вывод одного
потомка с вводом другого. Для > и >> терминал открывает файл и при помощи
dup/dup2 подменяет им стандартный поток вывода потомка.
